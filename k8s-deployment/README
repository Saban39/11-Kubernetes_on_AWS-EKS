https://github.com/Saban39/demo-app.git


</details>

******

<details>
<summary>Exercise 1: Create EKS cluster </summary>
 <br />

- First you need to install eksctl command line tool locally. See the installation guide here: https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html

**Steps**
```sh
# create cluster with 3 EC2 instances and store access configuration to cluster in kubeconfig.my-cluster.yaml file 
eksctl create cluster --name=my-cluster --nodes=3 --kubeconfig=./kubeconfig.my-cluster.yaml

# create fargate profile in the cluster. It will apply for all K8s components in my-app namespace
eksctl create fargateprofile \
    --cluster my-cluster \
    --name my-fargate-profile \
    --namespace my-app

# point kubectl to your cluster - use absolute path to kubeconfigfile
export KUBECONFIG={absolute-path}/kubeconfig.my-cluster.yaml

# validate cluster is accessible and nodes and fargate profile created
kubectl get node
eksctl get fargateprofile --cluster my-cluster

```

</details>

******

<details>
<summary>Exercise 2: Deploy Mysql and phpmyadmin </summary>
 <br />

**General notes**
- All the k8s manifest files for the exercise are in "k8s-deployment" folder, so:
```sh
# clone this repository locally
git clone https://gitlab.com/twn-devops-bootcamp/latest/11-eks/eks-exercises.git

# check out the solutions branch
git checkout feature/solutions

# change to k8s-deployment folder
cd k8s-deployment

```

- Mysql Chart link: 
https://github.com/bitnami/charts/tree/master/bitnami/mysql 

```sh
# install Mysql chart 
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install my-release bitnami/mysql -f mysql-chart-values-eks.yaml

# deploy phpmyadmin with its configuration for Mysql DB access
kubectl apply -f db-config.yaml
kubectl apply -f db-secret.yaml
kubectl apply -f phpmyadmin.yaml

# access phpmyadmin and login to mysql db
kubectl port-forward svc/phpmyadmin-service 8081:8081

# access in browser on
localhost:8081

# login with one of these 2 credentials
"my-user" : "my-pass"
"root" : "secret-root-pass"

```

</details>

******

<details>
<summary>Exercise 3: Deploy your Java Application with 3 replicas </summary>
 <br />

**Steps**
```sh

# Create namespace my-app to deploy our java application, because we are deploying java-app with fargate profile. And fargate profile we create applies for my-app namespace. 
kubectl create namespace my-app

# We now have to create all configuration and secrets for our java app in the my-app namespace

# Create my-registry-key secret to pull image 
export DOCKER_REGISTRY_SERVER="docker.io"
export DOCKER_USER="sg1905"
export DOCKER_EMAIL="sg1905w1@gmail.com"
export DOCKER_PASSWORD="k50VGdBM-\32"

kubectl create secret -n my-app docker-registry my-registry-key \
--docker-server=$DOCKER_REGISTRY_SERVER \
--docker-username=$DOCKER_USER \
--docker-password=$DOCKER_PASSWORD \
--docker-email=$DOCKER_EMAIL


# Again from k8s-deployment folder, execute following commands. By adding the my-app namespace, these components will be created with Fargate profile
kubectl apply -f db-secret.yaml -n my-app
kubectl apply -f db-config.yaml -n my-app
kubectl apply -f java-app.yaml -n my-app

```

</details>

******

<details>
<summary>Exercise 4 & 5: Automate deployment & Use ECR as Docker repository </summary>
 <br />

**Current cluster setup**

At this point, you already have an EKS cluster, where: 
- Mysql chart is deployed and phpmyadmin is running too
- my-app namespace was created
- db-config and db-secret were created in the my-app namespace for the java-app
- my-registry-key secret was created to fetch image from docker-hub
- your java app is also running 

**Steps to automate deployment for existing setup**
```sh
# Create an ECR registry for your java-app image

# Locally, on your computer: Create a docker registry secret for ECR
DOCKER_REGISTRY_SERVER=your ECR registry server - "your-aws-id.dkr.ecr.your-ecr-region.amazonaws.com"
DOCKER_USER=your dockerID, same as for `docker login` - "AWS"
DOCKER_PASSWORD=your dockerhub pwd, same as for `docker login` - get using: "aws ecr get-login-password --region {ecr-region}"

kubectl create secret -n my-app docker-registry my-ecr-registry-key \
--docker-server=$DOCKER_REGISTRY_SERVER \
--docker-username=$DOCKER_USER \
--docker-password=$DOCKER_PASSWORD

# SSH into server where Jenkins container is running
ssh -i {private-key-path} {user}@{public-ip}

# Enter Jenkins container
sudo docker exec -it {jenkins-container-id} -u 0 bash

# Install aws-cli inside Jenkins container
- Link: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install

# Install kubectl inside Jenkins container
- Link: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

apt-get update
apt-get install -y apt-transport-https ca-certificates curl gnupg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
chmod 644 /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt-get install -y kubectl

# Install envsubst tool
- Link: https://command-not-found.com/envsubst

apt-get update
apt-get install -y gettext-base

# create 2 "secret-text" credentials for AWS access in Jenkins: 
- "jenkins_aws_access_key_id" for AWS_ACCESS_KEY_ID 
- "jenkins_aws_secret_access_key" for AWS_SECRET_ACCESS_KEY    

# Create 4 "secret-text" credentials for db-secret.yaml:
- id: "db_user", secret: "my-user"
- id: "db_pass", secret: "my-pass"
- id: "db_name", secret: "my-app-db"
- id: "db_root_pass", secret: "secret-root-pass"

# Set the correct values in Jenkins for following environment variables: 
- ECR_REPO_URL
- CLUSTER_REGION

AWS

aws ecr get-login-password --region us-east-1 
eyJwYXlsb2FkIjoiTkV2WFlTRlo3VGZLa2lDeklJandQeXh1TnNvRDZqdEJCZzErRHV5azhBSDhwOXVSaG1vSEFianUvSXNKQ2Ruand4U1J4UEkwZ1ZTODUyZUFtRFFQQTJOcndwVjcveVpxdlZGR3Q0ZTVSeTc0Rm5yUy9jMFRUT0Job1o0SnlIdU9KMVk5emhNd082YXdVU3pDc3ZmOVYzd3ZDZEZqVWVYem92VkVyMXQwczNNMHJHRTlOQnd3SDY4dC9jbFVJY2FKbjBSeGNlYVByV3lrYklDNVZYZWdQT0E0dlJCU29HeU1PTjJVTGFJRGlaR2RSMklhanlQZ0FvQmVKVlhYVXhVdFg5TWF2OVdEd08ySFpyTFRRUCtoa3ZMSERDUGlIZDV2eUxINS9IalZiaE1WZ09pNlVzcXZMSGFoZWxWbis0N0VDUU54dWtXWGJIOXgvSlNuaGdFdldNTDBZdEpzclpmekwvZmFyZ01lWWJqWWI1bnIxQklLY2YzUFZsY0Q0RW95R2hrNDBpSnl2eGcwbllvNXNhSmN5RVB4MXYwMmVnR0FHQ05TRmRTSVpYN1JaMHJ6eU5OQmFHMkREbHc3YWV5eVZQMTZBYXRuNVN4WnM1STFpSVordW1EdzJ0WGVFcmtBdVdKYmVrZk9NaVV4TjVDM3crTzNPSFZuVzFBS3ZTS2JxQzRQT2dXVSttSFM1VWlNMnpzNy96c2NDeEpodjRXZHMyd3VkRTBMenZtT0FlV0pkUzQrTTlnM1NJWkJiUEc2WThxZzF0MFpEcCtkQU5VNStrTjQ0cjNlUHorYWJpTDZ4a24wb2J0ay9DSnJkMnB0ZDVGUzJ4SVJzTjJpNEhpS0tKQUIwYTlpS1pmQVNXeVFqT1M5YWlENkI0SFVPQ0tFQlF5ZE0yTllwaVFaWmQwazcyb2dVNWNreTZaQnJKd1duKzdRWS91QUdwc3gyT0dKZVAvV01DSmZDbm90dWdwYi92QTVhd1Q1WFFwTzFEYXpiTmlCck5ZcFovcG1wZnJ5RkZoT3JMNFcrdk5ETks1UjZZTzUyaXlTQWNzQldOODNpb0xtY2JFcFR2UkJlUHJlTW5EVWF6U0xHR3N2bWhzc3J6T3EwZldFUGtnSXk2MHNSTWxuQytCenZNT2VlQ0VyQTlFakZWdmtiN1pVZkg3WXFNcE5QYUNFMUF1dkVlbzh4Q3pGc0RSTkFWOGdYVUZoUmlsQzREQjBCMnRNL1JjQjI5U21sMDd2RGw4M213M01DWjlFQ0xUb0I2cTRHcWhqbVd3dndOOTl3RmhvYlkwdERrbTBLVmJ2azZLM2Nrd05ubnZ6enZxWUVOVUIxamRYdnZDUURBVHYxOXVtVWMrdE1kcGhtOXRmN0ppUiIsImRhdGFrZXkiOiJBUUVCQUhod20wWWFJU0plUnRKbTVuMUc2dXFlZWtYdW9YWFBlNVVGY2U5UnE4LzE0d0FBQUg0d2ZBWUpLb1pJaHZjTkFRY0dvRzh3YlFJQkFEQm9CZ2txaGtpRzl3MEJCd0V3SGdZSllJWklBV1VEQkFFdU1CRUVEQlNUTEdJY3lObE5nb1ovU0FJQkVJQTdoaGxVZXgrakNNVU8zYXd6c0tpRHVWVlVMM0NTRUg4ZTg0ZkptTGVDcU1ndjBqMFZIVmFlSkZYL0NtaXFRQW5kZGJjaFF3cHVUc0pNVjd3PSIsInZlcnNpb24iOiIyIiwidHlwZSI6IkRBVEFfS0VZIiwiZXhwaXJhdGlvbiI6MTc0NjU3MTU4NX0=



# Create Jenkins pipeline using the Jenkinsfile in this branch, in the root folder
Make sure the paths to the k8s manifest files in the "deploy" stage of the Jenkinsfile are all correct!!

```

</details>

******

<details>
<summary>Exercise 6: Configure Autoscaling </summary>
 <br />

You learn how to scale the cluster up and down in the **_Kubernetes on AWS_** module, video **_3 - Configure Autoscaling in EKS cluster_**